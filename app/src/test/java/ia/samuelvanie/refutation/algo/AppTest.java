/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ia.samuelvanie.refutation.algo;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Disabled;
import static org.junit.jupiter.api.Assertions.*;
import static ia.samuelvanie.refutation.algo.Refutation.*;
import java.util.ArrayList;
import java.util.List;

class AppTest {

    @Disabled
    @Test
    void checkIfItsOperator() {
        assertFalse(isOperator("||"));
    }

    @Disabled
    @Test
    void checkTokenList() {
        System.out.println(segmentSentence("A|(B(!C&D))"));
        assertTrue(true);
    }

    @Disabled
    @Test
    void checkForwardSlice() {
        List<String> list = new ArrayList<String>();
        list.add("A");
        list.add("|");
        list.add("(");
        list.add("B");
        list.add("(");
        list.add("!");
        list.add("C");
        list.add("&");
        list.add("D");
        list.add(")");
        list.add(")");
        System.out.println(forwardSlice(list, 2));
        assertTrue(true);
    }

    @Disabled
    @Test
    void checkBackwardSlice() {
        List<String> list = new ArrayList<String>();
        list.add("(");
        list.add("B");
        list.add("!");
        list.add("C");
        list.add("&");
        list.add("D");
        list.add(")");
        list.add(")");

        System.out.println(backwardSlice(list));
        assertTrue(true);
    }

    @Disabled
    @Test
    void checkAroundUnaryOp() {
        System.out.println(aroundUnaryOp(segmentSentence("A(B(!C&D))"), "!"));
    }

    @Disabled
    @Test
    void checkAroundBinaryOp() {
        System.out.println(aroundBinaryOp(segmentSentence("A(B(!C&D))"), "&"));
    }

    @Disabled
    @Test
    void checkInduceParenthesis() {
        System.out.println(induceParenthesis(segmentSentence("A(B(!C&D))")));
    }

    @Disabled
    @Test
    void checkLiteralNotProtected() {
        Boolean result = literalIsNotProtected(segmentSentence("A(B(!C&D))"));
        System.out.println(result.toString());
    }

    @Disabled
    @Test
    void checkIffEquivalent() {
        System.out.println(equivautConvertor(segmentSentence("A"), segmentSentence("B")));
    }

    @Disabled
    @Test
    void checkImpliesEquivent() {
        System.out.println(impliqueConvertor(segmentSentence("A"), segmentSentence("B")));
    }

    @Disabled
    @Test
    void checkEliminateOperators() {
        System.out.println(elimineOperator(segmentSentence("A(B(!C&D))"), "&"));
    }

    @Disabled
    @Test
    void checkMoveNotInwards() {
        List<String> list = new ArrayList<String>();
        list.add("(");
        list.add("(");
        list.add("A");
        list.add("|");
        list.add("B");
        list.add(")");
        list.add("|");
        list.add("(");
        list.add("(");
        list.add("!");
        list.add("C");
        list.add(")");
        list.add("&");
        list.add("D");
        list.add(")");
        list.add(")");
        System.out.println(moveNotInwards(list));
    }

    @Disabled
    @Test
    void checkDistributeOverAnd() {
        System.out.println(distributeOrOverAnd(segmentSentence("A|(B(!C&D))")));
    }

    @Disabled
    @Test
    void checkRemoveInvalidParenthesis(){
        System.out.println(eliminateInvalidParenthesis(segmentSentence(")A|(B(!C&D))")));
    }

    @Disabled
    @Test
    void checkProcessOperand(){
        System.out.println(processOperand(segmentSentence("A(B(!C&D))")));
    }

    @Disabled
    @Test
    void checkSplitAround(){
        System.out.println(splitAroundAnd(segmentSentence("A(B(!C&D))")));
    }

    @Disabled
    @Test
    void checkCnf(){
        System.out.println(cNF(induceParenthesis(segmentSentence("A|B|!C&D"))));
    }

    @Disabled
    @Test
    void checkClauseMap(){
        System.out.println(clauseMap(segmentSentence("A|B|!C&D")));
    }

    @Disabled
    @Test
    void checkIfResolve(){
        System.out.println(resolve(segmentSentence("A|B|!C&D"), 1));
    }

    @Disabled
    @Test
    void checkVetTest(){
        System.out.println(vetSentence(segmentSentence("A|B|!C&D")));
    }

}
